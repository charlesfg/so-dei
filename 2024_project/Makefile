# Makefiles are a simple way to manage the build process for a software project.
# They contain rules that specify how to generate target files from source files.
# The 'make' command reads the Makefile to determine what actions need to be taken.

# The Makefile consists of "targets", "prerequisites", and "recipes":
# - A target is usually the file that is generated by a program.
# - Prerequisites are files that are used as input to create a target.
# - A recipe is an action that 'make' takes to build a target from the prerequisites.

# -- Automatic Variables:
# https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html
# $@: Represents the target of the rule. It typically refers to the file being generated.
# $<: Represents the first prerequisite of the rule. It refers to the first dependency of the target.
# $^: Represents all the prerequisites of the rule. It refers to all dependencies of the target.
# $: Represents the stem of the target file name. It is useful when dealing with pattern rules.
# $?: Represents all the prerequisites that are newer than the target. It refers to dependencies that have been modified more recently than the target.
# $: Represents the directory part of the target file name.
# $*: Represents the stem of the target file name. It is similar to $, but does not include the file extension.
# $(@D): Represents the directory part of the target file name.
# $(@F): Represents the file part of the target file name.

# Comments start with a # and go to the end of the line.

# Here we define variables that we can use later in the Makefile.
# Variables allow for more readable and maintainable Makefiles.

# The 'CC' variable holds the name of the C compiler we want to use.
CC=gcc

MULTIPROCESSING=-lpthread -DREENTRANT 

# The 'CFLAGS' variable holds compiler flags that we want to use.
# -Wall tells the compiler to give verbose warnings.
# -g tells the compiler to include debugging information in the executable.
CFLAGS=-Wall -g
COMMONS=log.c config.c semlib.c ipc.c utils.c
SOURCES= $(COMMONS) sys_manager.c mobile_user.c back_user.c
SYS_MANAGER= $(COMMONS) sys_manager.c
MOBILE_SOURCES= $(COMMONS) mobile_user.c
BACK_SOURCES= $(COMMONS) back_user.c
# auth_request_manager.c monitor_engine.c

OBJECTS=$(SOURCES:.c=.o)
HEADERS=$(SOURCES:.c=.h)

# The 'TARGET' variable is the name of the final executable file we want to create.
TARGET=5g_auth_platform

mobile_user: 
	$(CC) $(CFLAGS) $(MOBILE_SOURCES) -o $@ $(MULTIPROCESSING)

back_user: 
	$(CC) $(CFLAGS) $(BACK_SOURCES) -o $@ $(MULTIPROCESSING)

# 'all' is a conventional target that builds everything that needs to be built.
# Here we define it to depend on the $(TARGET), which means it will build the TARGET.
all: $(TARGET) mobile_user

# This rule says how to build the target 'your_program' from 'your_program.c'.
# The target is on the left side of the colon, and the prerequisites are on the right side.
# The recipe part is below. It starts with a tab (not spaces).
# '$(CC)' is replaced by the value of the CC variable, which is 'gcc'.
# '$(CFLAGS)' is replaced by the value of the CFLAGS variable.
# The '-o $@' tells the compiler to output the result to the file name of the target.
# '$^' is a special variable that means "all the prerequisites", in this case 'your_program.c'.
# '-lm' tells the compiler to link against the math library.
$(TARGET): $(OBJECTS)
	$(CC) $(CFLAGS) $(OBJECTS) -o $@ $(MULTIPROCESSING)

.c.o: $(SOURCES) $(HEADERS)
	$(CC) $(CFLAGS) -c $< -o $@

# Rule to generate .i files from .c files
%.i: %.c
	$(CC) $(CFLAGS) -E $< -o $@

rotate_log:
	test -e log.txt && mv log.txt log_$(shell date +%Y%m%d_%H%M%S).txt

preprocess: $(SOURCES:.c=.i)


test_config: config.c log.c
	$(CC) $(CFLAGS) -DTEST_CONFIG $^ -o $@


# The 'clean' target is used to remove files that were generated during the build.
# It's not a file itself, so we mark it as .PHONY, which means it's "phony" 
# or not a real file target.
clean:
	# Remove the TARGET file and any file ending in a tilde (~), which are backup files.
	rm -f $(TARGET) *~ *.o test_config *.i

# 'run' is a convenience target to compile, if necessary, and run the program.
run: $(TARGET)
	./$(TARGET) ex_conf.cfg

#  '.PHONY'  tells make that 'all', 'clean', and 'run' are not files, 
# even if there are files named 'all', 'clean', or 'run'.
.PHONY: all clean run
